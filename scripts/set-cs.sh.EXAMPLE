#!/bin/bash

#############################################################################
#
# This creates databases on a Render PostgreSQL instance by running remote sql commands
# REQUIREMENTS: a local postgres installation and its pgadmin password
# These are the commands that it executes:
#     psql "<external_database_url>" -c "CREATE DATABASE bookshelter_db;"
#     psql "<external_database_url>" -c "CREATE DATABASE kanban_db;"
#     psql "<external_database_url>" -c "CREATE DATABASE routinesaga_db;"
#
#
# Steps:
#
# 1. Set the EXTERNAL_CS
EXTERNAL_CS="<External Database URL>"
# 2. Set the password in the shell for the script to read in (the password specified in
#    render psql instance's External Database URL (postgresql://<user>:<password>@<host>)
#    $ export PG_PASSWORD='<password>'
# 2. Set an environment variable for your local pg admin password in your shell
# 3. Run this script
#
#############################################################################

DATABASES=(
  "bookshelter_db"
  "kanban_db"
  "routinesaga_db"
)

# A list for convenience later:
echo "=================="
echo "DATABASES:"
echo "=================="
for DB_NAME in "${DATABASES[@]}"; do
  echo "${DB_NAME}"
done
echo "=================="

# Export PGPASSWORD for psql
export PGPASSWORD="$PG_PASSWORD"

# Create each database
for DB_NAME in "${DATABASES[@]}"; do
  echo "Creating database: $DB_NAME"
  psql "${EXTERNAL_CS}" -c "CREATE DATABASE $DB_NAME;"
done

# # Delete each database
# for DB_NAME in "${DATABASES[@]}"; do
#   echo "Deleting database: $DB_NAME"
#   psql "${EXTERNAL_CS}" -c "DROP DATABASE $DB_NAME;"
# done

echo "=================="
# Show databases
psql "$EXTERNAL_CS" -Atc "SELECT datname FROM pg_database WHERE datistemplate = false;"

# To connect:
# psql "${EXTERNAL_CS}"
# List: \l;
# Exit: \q

# Unset PGPASSWORD for security after the script finishes
unset PGPASSWORD
